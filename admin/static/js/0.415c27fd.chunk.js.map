{"version":3,"sources":["modules/products/product-table-page.tsx"],"names":["ProductTablePage","getFetchProducts","useProductTable","headers","NumericHeader","onFetchStart","addItemUrl","productNewRoute","path","addItemTitle","row","imgSrc","images","file","url","Row","ImageColumn","src","LinkColumn","getRouteUrl","productDetailRoute","id","params","name","TextColumn","active","moment","date_updated","format","CurrencyColumn","value","stock_level","fallback","price","fetchData","useFetchData","a","page","limit","config","apiSwell","method","body","paging","res","data","count","items","results"],"mappings":"2SAWaA,EAAmB,WAAO,IAC9BC,EAAsBC,IAAtBD,iBACP,OACE,kBAAC,OAAD,KACE,kBAAC,QAAD,KACE,kBAAC,YAAD,CACEE,QAAS,CAAC,GAAI,UAAW,SAAU,UAAW,kBAAC,QAAMC,cAAP,cAAkD,kBAAC,QAAMA,cAAP,eAChGC,aAAcJ,IACdK,WAAYC,IAAgBC,KAC5BC,aAAa,cACbC,IAAK,YAAc,IAAD,EAAVA,EAAU,EAAVA,IACAC,EAASD,EAAIE,OAAJ,UAAaF,EAAIE,OAAO,UAAxB,aAAa,EAAeC,KAAKC,IAAM,GACtD,OACE,kBAAC,QAAMC,IAAP,KACE,kBAAC,QAAMC,YAAP,CAAmBC,IAAKN,IACxB,kBAAC,QAAMO,WAAP,CAAkBV,KAAMW,YAAYC,IAAmBZ,KAAM,CAAEa,GAAIX,EAAIW,KAAOC,OAAQZ,GAAMA,EAAIa,MAChG,kBAAC,QAAMC,WAAP,KAAmBd,EAAIe,OAAS,SAAW,YAC3C,kBAAC,QAAMD,WAAP,KAAmBE,IAAOhB,EAAIiB,cAAcC,OAAO,UACnD,kBAAC,QAAMC,eAAP,CAAsBC,MAAOpB,EAAIqB,YAAaC,SAAS,MACvD,kBAAC,QAAMH,eAAP,CAAsBC,MAAOpB,EAAIuB,MAAOD,SAAS,aAU3D9B,EAAkB,WAAO,IACrBgC,EAAcC,cAAdD,UAeR,MAAO,CACLjC,iBAfuB,yDAAM,uCAAAmC,EAAA,6DAASC,EAAT,EAASA,KAAMC,EAAf,EAAeA,MAAf,SACXJ,EAAqD,CACrEpB,IAAI,GAAD,OAAKyB,IAAOC,SAAZ,aACHC,OAAQ,OACRC,KAAM,CACJC,OAAQ,CAAEN,OAAMC,YALS,cACvBM,EADuB,SAQKA,EAAIC,KAA9BC,EARqB,EAQrBA,MAAgBC,EARK,EAQdC,QARc,kBAStB,CACLF,QACAC,MAAOA,IAXoB,2CAAN,yDAmBZ/C","file":"static/js/0.415c27fd.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport {useFetchData} from 'library/common/fetch-data';\nimport { Page, Panel, DataTable, Table } from 'library/components';\nimport {productDetailRoute, productNewRoute} from './routes';\nimport {getRouteUrl} from 'library/common/navigation/utils';\nimport {ProductItem} from './types';\nimport { config } from 'config';\n\n// https://umoja-bucket.s3.eu-west-3.amazonaws.com/public/p1.jpg\n\nexport const ProductTablePage = () => {\n  const {getFetchProducts  } = useProductTable();\n  return (\n    <Page>\n      <Panel>\n        <DataTable<ProductItem>\n          headers={[\"\", 'Product', 'Status', 'Updated', <Table.NumericHeader>Stock</Table.NumericHeader>, <Table.NumericHeader>Price</Table.NumericHeader>]}\n          onFetchStart={getFetchProducts()}\n          addItemUrl={productNewRoute.path}\n          addItemTitle=\"New product\"\n          row={({ row }) => {\n            const imgSrc = row.images ? row.images[0]?.file.url : '';\n            return (\n              <Table.Row>\n                <Table.ImageColumn src={imgSrc} />\n                <Table.LinkColumn path={getRouteUrl(productDetailRoute.path, { id: row.id })} params={row}>{row.name}</Table.LinkColumn>\n                <Table.TextColumn>{row.active ? 'Active' : 'Inactive'}</Table.TextColumn>\n                <Table.TextColumn>{moment(row.date_updated).format(\"MMM D\")}</Table.TextColumn>\n                <Table.CurrencyColumn value={row.stock_level} fallback=\"-\" />\n                <Table.CurrencyColumn value={row.price} fallback=\"-\"/>\n              </Table.Row>\n            )\n          }}\n        />\n      </Panel>\n    </Page>\n  )\n};\n\nconst useProductTable = () => {\n  const { fetchData } = useFetchData();\n  const getFetchProducts = () => async ({ page, limit }: any) => {\n    const res = await fetchData<{ count: number, results: ProductItem[] }>({\n      url: `${config.apiSwell}/products`,\n      method: 'POST',\n      body: {\n        paging: { page, limit }\n      }\n    });\n    const { count, results: items } = res.data;\n    return {\n      count,\n      items: items as ProductItem[]\n    }\n  }\n  return {\n    getFetchProducts,\n  }\n}\n\nexport default ProductTablePage;"],"sourceRoot":""}